// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/03/2023 14:56:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    datapath
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module datapath_vlg_sample_tst(
	c,
	clock,
	data_in,
	reset,
	sampler_tx
);
input [28:0] c;
input  clock;
input [7:0] data_in;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(c or clock or data_in or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module datapath_vlg_check_tst (
	Cout,
	data_out,
	DEBUG_7_7,
	DEBUG_7_6,
	DEBUG_7_5,
	DEBUG_7_4,
	DEBUG_7_3,
	DEBUG_7_2,
	DEBUG_7_1,
	DEBUG_7_0,
	DEBUG_6_7,
	DEBUG_6_6,
	DEBUG_6_5,
	DEBUG_6_4,
	DEBUG_6_3,
	DEBUG_6_2,
	DEBUG_6_1,
	DEBUG_6_0,
	DEBUG_5_7,
	DEBUG_5_6,
	DEBUG_5_5,
	DEBUG_5_4,
	DEBUG_5_3,
	DEBUG_5_2,
	DEBUG_5_1,
	DEBUG_5_0,
	DEBUG_4_7,
	DEBUG_4_6,
	DEBUG_4_5,
	DEBUG_4_4,
	DEBUG_4_3,
	DEBUG_4_2,
	DEBUG_4_1,
	DEBUG_4_0,
	DEBUG_3_7,
	DEBUG_3_6,
	DEBUG_3_5,
	DEBUG_3_4,
	DEBUG_3_3,
	DEBUG_3_2,
	DEBUG_3_1,
	DEBUG_3_0,
	DEBUG_2_7,
	DEBUG_2_6,
	DEBUG_2_5,
	DEBUG_2_4,
	DEBUG_2_3,
	DEBUG_2_2,
	DEBUG_2_1,
	DEBUG_2_0,
	DEBUG_1_7,
	DEBUG_1_6,
	DEBUG_1_5,
	DEBUG_1_4,
	DEBUG_1_3,
	DEBUG_1_2,
	DEBUG_1_1,
	DEBUG_1_0,
	DEBUG_0_7,
	DEBUG_0_6,
	DEBUG_0_5,
	DEBUG_0_4,
	DEBUG_0_3,
	DEBUG_0_2,
	DEBUG_0_1,
	DEBUG_0_0,
	N,
	Ov,
	Z,
	sampler_rx
);
input  Cout;
input [7:0] data_out;
input  DEBUG_7_7;
input  DEBUG_7_6;
input  DEBUG_7_5;
input  DEBUG_7_4;
input  DEBUG_7_3;
input  DEBUG_7_2;
input  DEBUG_7_1;
input  DEBUG_7_0;
input  DEBUG_6_7;
input  DEBUG_6_6;
input  DEBUG_6_5;
input  DEBUG_6_4;
input  DEBUG_6_3;
input  DEBUG_6_2;
input  DEBUG_6_1;
input  DEBUG_6_0;
input  DEBUG_5_7;
input  DEBUG_5_6;
input  DEBUG_5_5;
input  DEBUG_5_4;
input  DEBUG_5_3;
input  DEBUG_5_2;
input  DEBUG_5_1;
input  DEBUG_5_0;
input  DEBUG_4_7;
input  DEBUG_4_6;
input  DEBUG_4_5;
input  DEBUG_4_4;
input  DEBUG_4_3;
input  DEBUG_4_2;
input  DEBUG_4_1;
input  DEBUG_4_0;
input  DEBUG_3_7;
input  DEBUG_3_6;
input  DEBUG_3_5;
input  DEBUG_3_4;
input  DEBUG_3_3;
input  DEBUG_3_2;
input  DEBUG_3_1;
input  DEBUG_3_0;
input  DEBUG_2_7;
input  DEBUG_2_6;
input  DEBUG_2_5;
input  DEBUG_2_4;
input  DEBUG_2_3;
input  DEBUG_2_2;
input  DEBUG_2_1;
input  DEBUG_2_0;
input  DEBUG_1_7;
input  DEBUG_1_6;
input  DEBUG_1_5;
input  DEBUG_1_4;
input  DEBUG_1_3;
input  DEBUG_1_2;
input  DEBUG_1_1;
input  DEBUG_1_0;
input  DEBUG_0_7;
input  DEBUG_0_6;
input  DEBUG_0_5;
input  DEBUG_0_4;
input  DEBUG_0_3;
input  DEBUG_0_2;
input  DEBUG_0_1;
input  DEBUG_0_0;
input  N;
input  Ov;
input  Z;
input sampler_rx;

reg  Cout_expected;
reg [7:0] data_out_expected;
reg  DEBUG_7_7_expected;
reg  DEBUG_7_6_expected;
reg  DEBUG_7_5_expected;
reg  DEBUG_7_4_expected;
reg  DEBUG_7_3_expected;
reg  DEBUG_7_2_expected;
reg  DEBUG_7_1_expected;
reg  DEBUG_7_0_expected;
reg  DEBUG_6_7_expected;
reg  DEBUG_6_6_expected;
reg  DEBUG_6_5_expected;
reg  DEBUG_6_4_expected;
reg  DEBUG_6_3_expected;
reg  DEBUG_6_2_expected;
reg  DEBUG_6_1_expected;
reg  DEBUG_6_0_expected;
reg  DEBUG_5_7_expected;
reg  DEBUG_5_6_expected;
reg  DEBUG_5_5_expected;
reg  DEBUG_5_4_expected;
reg  DEBUG_5_3_expected;
reg  DEBUG_5_2_expected;
reg  DEBUG_5_1_expected;
reg  DEBUG_5_0_expected;
reg  DEBUG_4_7_expected;
reg  DEBUG_4_6_expected;
reg  DEBUG_4_5_expected;
reg  DEBUG_4_4_expected;
reg  DEBUG_4_3_expected;
reg  DEBUG_4_2_expected;
reg  DEBUG_4_1_expected;
reg  DEBUG_4_0_expected;
reg  DEBUG_3_7_expected;
reg  DEBUG_3_6_expected;
reg  DEBUG_3_5_expected;
reg  DEBUG_3_4_expected;
reg  DEBUG_3_3_expected;
reg  DEBUG_3_2_expected;
reg  DEBUG_3_1_expected;
reg  DEBUG_3_0_expected;
reg  DEBUG_2_7_expected;
reg  DEBUG_2_6_expected;
reg  DEBUG_2_5_expected;
reg  DEBUG_2_4_expected;
reg  DEBUG_2_3_expected;
reg  DEBUG_2_2_expected;
reg  DEBUG_2_1_expected;
reg  DEBUG_2_0_expected;
reg  DEBUG_1_7_expected;
reg  DEBUG_1_6_expected;
reg  DEBUG_1_5_expected;
reg  DEBUG_1_4_expected;
reg  DEBUG_1_3_expected;
reg  DEBUG_1_2_expected;
reg  DEBUG_1_1_expected;
reg  DEBUG_1_0_expected;
reg  DEBUG_0_7_expected;
reg  DEBUG_0_6_expected;
reg  DEBUG_0_5_expected;
reg  DEBUG_0_4_expected;
reg  DEBUG_0_3_expected;
reg  DEBUG_0_2_expected;
reg  DEBUG_0_1_expected;
reg  DEBUG_0_0_expected;
reg  N_expected;
reg  Ov_expected;
reg  Z_expected;

reg  Cout_prev;
reg [7:0] data_out_prev;
reg  DEBUG_7_7_prev;
reg  DEBUG_7_6_prev;
reg  DEBUG_7_5_prev;
reg  DEBUG_7_4_prev;
reg  DEBUG_7_3_prev;
reg  DEBUG_7_2_prev;
reg  DEBUG_7_1_prev;
reg  DEBUG_7_0_prev;
reg  DEBUG_6_7_prev;
reg  DEBUG_6_6_prev;
reg  DEBUG_6_5_prev;
reg  DEBUG_6_4_prev;
reg  DEBUG_6_3_prev;
reg  DEBUG_6_2_prev;
reg  DEBUG_6_1_prev;
reg  DEBUG_6_0_prev;
reg  DEBUG_5_7_prev;
reg  DEBUG_5_6_prev;
reg  DEBUG_5_5_prev;
reg  DEBUG_5_4_prev;
reg  DEBUG_5_3_prev;
reg  DEBUG_5_2_prev;
reg  DEBUG_5_1_prev;
reg  DEBUG_5_0_prev;
reg  DEBUG_4_7_prev;
reg  DEBUG_4_6_prev;
reg  DEBUG_4_5_prev;
reg  DEBUG_4_4_prev;
reg  DEBUG_4_3_prev;
reg  DEBUG_4_2_prev;
reg  DEBUG_4_1_prev;
reg  DEBUG_4_0_prev;
reg  DEBUG_3_7_prev;
reg  DEBUG_3_6_prev;
reg  DEBUG_3_5_prev;
reg  DEBUG_3_4_prev;
reg  DEBUG_3_3_prev;
reg  DEBUG_3_2_prev;
reg  DEBUG_3_1_prev;
reg  DEBUG_3_0_prev;
reg  DEBUG_2_7_prev;
reg  DEBUG_2_6_prev;
reg  DEBUG_2_5_prev;
reg  DEBUG_2_4_prev;
reg  DEBUG_2_3_prev;
reg  DEBUG_2_2_prev;
reg  DEBUG_2_1_prev;
reg  DEBUG_2_0_prev;
reg  DEBUG_1_7_prev;
reg  DEBUG_1_6_prev;
reg  DEBUG_1_5_prev;
reg  DEBUG_1_4_prev;
reg  DEBUG_1_3_prev;
reg  DEBUG_1_2_prev;
reg  DEBUG_1_1_prev;
reg  DEBUG_1_0_prev;
reg  DEBUG_0_7_prev;
reg  DEBUG_0_6_prev;
reg  DEBUG_0_5_prev;
reg  DEBUG_0_4_prev;
reg  DEBUG_0_3_prev;
reg  DEBUG_0_2_prev;
reg  DEBUG_0_1_prev;
reg  DEBUG_0_0_prev;
reg  N_prev;
reg  Ov_prev;
reg  Z_prev;

reg  Cout_expected_prev;
reg [7:0] data_out_expected_prev;
reg  DEBUG_7_7_expected_prev;
reg  DEBUG_7_6_expected_prev;
reg  DEBUG_7_5_expected_prev;
reg  DEBUG_7_4_expected_prev;
reg  DEBUG_7_3_expected_prev;
reg  DEBUG_7_2_expected_prev;
reg  DEBUG_7_1_expected_prev;
reg  DEBUG_7_0_expected_prev;
reg  DEBUG_6_7_expected_prev;
reg  DEBUG_6_6_expected_prev;
reg  DEBUG_6_5_expected_prev;
reg  DEBUG_6_4_expected_prev;
reg  DEBUG_6_3_expected_prev;
reg  DEBUG_6_2_expected_prev;
reg  DEBUG_6_1_expected_prev;
reg  DEBUG_6_0_expected_prev;
reg  DEBUG_5_7_expected_prev;
reg  DEBUG_5_6_expected_prev;
reg  DEBUG_5_5_expected_prev;
reg  DEBUG_5_4_expected_prev;
reg  DEBUG_5_3_expected_prev;
reg  DEBUG_5_2_expected_prev;
reg  DEBUG_5_1_expected_prev;
reg  DEBUG_5_0_expected_prev;
reg  DEBUG_4_7_expected_prev;
reg  DEBUG_4_6_expected_prev;
reg  DEBUG_4_5_expected_prev;
reg  DEBUG_4_4_expected_prev;
reg  DEBUG_4_3_expected_prev;
reg  DEBUG_4_2_expected_prev;
reg  DEBUG_4_1_expected_prev;
reg  DEBUG_4_0_expected_prev;
reg  DEBUG_3_7_expected_prev;
reg  DEBUG_3_6_expected_prev;
reg  DEBUG_3_5_expected_prev;
reg  DEBUG_3_4_expected_prev;
reg  DEBUG_3_3_expected_prev;
reg  DEBUG_3_2_expected_prev;
reg  DEBUG_3_1_expected_prev;
reg  DEBUG_3_0_expected_prev;
reg  DEBUG_2_7_expected_prev;
reg  DEBUG_2_6_expected_prev;
reg  DEBUG_2_5_expected_prev;
reg  DEBUG_2_4_expected_prev;
reg  DEBUG_2_3_expected_prev;
reg  DEBUG_2_2_expected_prev;
reg  DEBUG_2_1_expected_prev;
reg  DEBUG_2_0_expected_prev;
reg  DEBUG_1_7_expected_prev;
reg  DEBUG_1_6_expected_prev;
reg  DEBUG_1_5_expected_prev;
reg  DEBUG_1_4_expected_prev;
reg  DEBUG_1_3_expected_prev;
reg  DEBUG_1_2_expected_prev;
reg  DEBUG_1_1_expected_prev;
reg  DEBUG_1_0_expected_prev;
reg  DEBUG_0_7_expected_prev;
reg  DEBUG_0_6_expected_prev;
reg  DEBUG_0_5_expected_prev;
reg  DEBUG_0_4_expected_prev;
reg  DEBUG_0_3_expected_prev;
reg  DEBUG_0_2_expected_prev;
reg  DEBUG_0_1_expected_prev;
reg  DEBUG_0_0_expected_prev;
reg  N_expected_prev;
reg  Ov_expected_prev;
reg  Z_expected_prev;

reg  last_Cout_exp;
reg [7:0] last_data_out_exp;
reg  last_DEBUG_7_7_exp;
reg  last_DEBUG_7_6_exp;
reg  last_DEBUG_7_5_exp;
reg  last_DEBUG_7_4_exp;
reg  last_DEBUG_7_3_exp;
reg  last_DEBUG_7_2_exp;
reg  last_DEBUG_7_1_exp;
reg  last_DEBUG_7_0_exp;
reg  last_DEBUG_6_7_exp;
reg  last_DEBUG_6_6_exp;
reg  last_DEBUG_6_5_exp;
reg  last_DEBUG_6_4_exp;
reg  last_DEBUG_6_3_exp;
reg  last_DEBUG_6_2_exp;
reg  last_DEBUG_6_1_exp;
reg  last_DEBUG_6_0_exp;
reg  last_DEBUG_5_7_exp;
reg  last_DEBUG_5_6_exp;
reg  last_DEBUG_5_5_exp;
reg  last_DEBUG_5_4_exp;
reg  last_DEBUG_5_3_exp;
reg  last_DEBUG_5_2_exp;
reg  last_DEBUG_5_1_exp;
reg  last_DEBUG_5_0_exp;
reg  last_DEBUG_4_7_exp;
reg  last_DEBUG_4_6_exp;
reg  last_DEBUG_4_5_exp;
reg  last_DEBUG_4_4_exp;
reg  last_DEBUG_4_3_exp;
reg  last_DEBUG_4_2_exp;
reg  last_DEBUG_4_1_exp;
reg  last_DEBUG_4_0_exp;
reg  last_DEBUG_3_7_exp;
reg  last_DEBUG_3_6_exp;
reg  last_DEBUG_3_5_exp;
reg  last_DEBUG_3_4_exp;
reg  last_DEBUG_3_3_exp;
reg  last_DEBUG_3_2_exp;
reg  last_DEBUG_3_1_exp;
reg  last_DEBUG_3_0_exp;
reg  last_DEBUG_2_7_exp;
reg  last_DEBUG_2_6_exp;
reg  last_DEBUG_2_5_exp;
reg  last_DEBUG_2_4_exp;
reg  last_DEBUG_2_3_exp;
reg  last_DEBUG_2_2_exp;
reg  last_DEBUG_2_1_exp;
reg  last_DEBUG_2_0_exp;
reg  last_DEBUG_1_7_exp;
reg  last_DEBUG_1_6_exp;
reg  last_DEBUG_1_5_exp;
reg  last_DEBUG_1_4_exp;
reg  last_DEBUG_1_3_exp;
reg  last_DEBUG_1_2_exp;
reg  last_DEBUG_1_1_exp;
reg  last_DEBUG_1_0_exp;
reg  last_DEBUG_0_7_exp;
reg  last_DEBUG_0_6_exp;
reg  last_DEBUG_0_5_exp;
reg  last_DEBUG_0_4_exp;
reg  last_DEBUG_0_3_exp;
reg  last_DEBUG_0_2_exp;
reg  last_DEBUG_0_1_exp;
reg  last_DEBUG_0_0_exp;
reg  last_N_exp;
reg  last_Ov_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:69] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 69'b1;
end

// update real /o prevs

always @(trigger)
begin
	Cout_prev = Cout;
	data_out_prev = data_out;
	DEBUG_7_7_prev = DEBUG_7_7;
	DEBUG_7_6_prev = DEBUG_7_6;
	DEBUG_7_5_prev = DEBUG_7_5;
	DEBUG_7_4_prev = DEBUG_7_4;
	DEBUG_7_3_prev = DEBUG_7_3;
	DEBUG_7_2_prev = DEBUG_7_2;
	DEBUG_7_1_prev = DEBUG_7_1;
	DEBUG_7_0_prev = DEBUG_7_0;
	DEBUG_6_7_prev = DEBUG_6_7;
	DEBUG_6_6_prev = DEBUG_6_6;
	DEBUG_6_5_prev = DEBUG_6_5;
	DEBUG_6_4_prev = DEBUG_6_4;
	DEBUG_6_3_prev = DEBUG_6_3;
	DEBUG_6_2_prev = DEBUG_6_2;
	DEBUG_6_1_prev = DEBUG_6_1;
	DEBUG_6_0_prev = DEBUG_6_0;
	DEBUG_5_7_prev = DEBUG_5_7;
	DEBUG_5_6_prev = DEBUG_5_6;
	DEBUG_5_5_prev = DEBUG_5_5;
	DEBUG_5_4_prev = DEBUG_5_4;
	DEBUG_5_3_prev = DEBUG_5_3;
	DEBUG_5_2_prev = DEBUG_5_2;
	DEBUG_5_1_prev = DEBUG_5_1;
	DEBUG_5_0_prev = DEBUG_5_0;
	DEBUG_4_7_prev = DEBUG_4_7;
	DEBUG_4_6_prev = DEBUG_4_6;
	DEBUG_4_5_prev = DEBUG_4_5;
	DEBUG_4_4_prev = DEBUG_4_4;
	DEBUG_4_3_prev = DEBUG_4_3;
	DEBUG_4_2_prev = DEBUG_4_2;
	DEBUG_4_1_prev = DEBUG_4_1;
	DEBUG_4_0_prev = DEBUG_4_0;
	DEBUG_3_7_prev = DEBUG_3_7;
	DEBUG_3_6_prev = DEBUG_3_6;
	DEBUG_3_5_prev = DEBUG_3_5;
	DEBUG_3_4_prev = DEBUG_3_4;
	DEBUG_3_3_prev = DEBUG_3_3;
	DEBUG_3_2_prev = DEBUG_3_2;
	DEBUG_3_1_prev = DEBUG_3_1;
	DEBUG_3_0_prev = DEBUG_3_0;
	DEBUG_2_7_prev = DEBUG_2_7;
	DEBUG_2_6_prev = DEBUG_2_6;
	DEBUG_2_5_prev = DEBUG_2_5;
	DEBUG_2_4_prev = DEBUG_2_4;
	DEBUG_2_3_prev = DEBUG_2_3;
	DEBUG_2_2_prev = DEBUG_2_2;
	DEBUG_2_1_prev = DEBUG_2_1;
	DEBUG_2_0_prev = DEBUG_2_0;
	DEBUG_1_7_prev = DEBUG_1_7;
	DEBUG_1_6_prev = DEBUG_1_6;
	DEBUG_1_5_prev = DEBUG_1_5;
	DEBUG_1_4_prev = DEBUG_1_4;
	DEBUG_1_3_prev = DEBUG_1_3;
	DEBUG_1_2_prev = DEBUG_1_2;
	DEBUG_1_1_prev = DEBUG_1_1;
	DEBUG_1_0_prev = DEBUG_1_0;
	DEBUG_0_7_prev = DEBUG_0_7;
	DEBUG_0_6_prev = DEBUG_0_6;
	DEBUG_0_5_prev = DEBUG_0_5;
	DEBUG_0_4_prev = DEBUG_0_4;
	DEBUG_0_3_prev = DEBUG_0_3;
	DEBUG_0_2_prev = DEBUG_0_2;
	DEBUG_0_1_prev = DEBUG_0_1;
	DEBUG_0_0_prev = DEBUG_0_0;
	N_prev = N;
	Ov_prev = Ov;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	Cout_expected_prev = Cout_expected;
	data_out_expected_prev = data_out_expected;
	DEBUG_7_7_expected_prev = DEBUG_7_7_expected;
	DEBUG_7_6_expected_prev = DEBUG_7_6_expected;
	DEBUG_7_5_expected_prev = DEBUG_7_5_expected;
	DEBUG_7_4_expected_prev = DEBUG_7_4_expected;
	DEBUG_7_3_expected_prev = DEBUG_7_3_expected;
	DEBUG_7_2_expected_prev = DEBUG_7_2_expected;
	DEBUG_7_1_expected_prev = DEBUG_7_1_expected;
	DEBUG_7_0_expected_prev = DEBUG_7_0_expected;
	DEBUG_6_7_expected_prev = DEBUG_6_7_expected;
	DEBUG_6_6_expected_prev = DEBUG_6_6_expected;
	DEBUG_6_5_expected_prev = DEBUG_6_5_expected;
	DEBUG_6_4_expected_prev = DEBUG_6_4_expected;
	DEBUG_6_3_expected_prev = DEBUG_6_3_expected;
	DEBUG_6_2_expected_prev = DEBUG_6_2_expected;
	DEBUG_6_1_expected_prev = DEBUG_6_1_expected;
	DEBUG_6_0_expected_prev = DEBUG_6_0_expected;
	DEBUG_5_7_expected_prev = DEBUG_5_7_expected;
	DEBUG_5_6_expected_prev = DEBUG_5_6_expected;
	DEBUG_5_5_expected_prev = DEBUG_5_5_expected;
	DEBUG_5_4_expected_prev = DEBUG_5_4_expected;
	DEBUG_5_3_expected_prev = DEBUG_5_3_expected;
	DEBUG_5_2_expected_prev = DEBUG_5_2_expected;
	DEBUG_5_1_expected_prev = DEBUG_5_1_expected;
	DEBUG_5_0_expected_prev = DEBUG_5_0_expected;
	DEBUG_4_7_expected_prev = DEBUG_4_7_expected;
	DEBUG_4_6_expected_prev = DEBUG_4_6_expected;
	DEBUG_4_5_expected_prev = DEBUG_4_5_expected;
	DEBUG_4_4_expected_prev = DEBUG_4_4_expected;
	DEBUG_4_3_expected_prev = DEBUG_4_3_expected;
	DEBUG_4_2_expected_prev = DEBUG_4_2_expected;
	DEBUG_4_1_expected_prev = DEBUG_4_1_expected;
	DEBUG_4_0_expected_prev = DEBUG_4_0_expected;
	DEBUG_3_7_expected_prev = DEBUG_3_7_expected;
	DEBUG_3_6_expected_prev = DEBUG_3_6_expected;
	DEBUG_3_5_expected_prev = DEBUG_3_5_expected;
	DEBUG_3_4_expected_prev = DEBUG_3_4_expected;
	DEBUG_3_3_expected_prev = DEBUG_3_3_expected;
	DEBUG_3_2_expected_prev = DEBUG_3_2_expected;
	DEBUG_3_1_expected_prev = DEBUG_3_1_expected;
	DEBUG_3_0_expected_prev = DEBUG_3_0_expected;
	DEBUG_2_7_expected_prev = DEBUG_2_7_expected;
	DEBUG_2_6_expected_prev = DEBUG_2_6_expected;
	DEBUG_2_5_expected_prev = DEBUG_2_5_expected;
	DEBUG_2_4_expected_prev = DEBUG_2_4_expected;
	DEBUG_2_3_expected_prev = DEBUG_2_3_expected;
	DEBUG_2_2_expected_prev = DEBUG_2_2_expected;
	DEBUG_2_1_expected_prev = DEBUG_2_1_expected;
	DEBUG_2_0_expected_prev = DEBUG_2_0_expected;
	DEBUG_1_7_expected_prev = DEBUG_1_7_expected;
	DEBUG_1_6_expected_prev = DEBUG_1_6_expected;
	DEBUG_1_5_expected_prev = DEBUG_1_5_expected;
	DEBUG_1_4_expected_prev = DEBUG_1_4_expected;
	DEBUG_1_3_expected_prev = DEBUG_1_3_expected;
	DEBUG_1_2_expected_prev = DEBUG_1_2_expected;
	DEBUG_1_1_expected_prev = DEBUG_1_1_expected;
	DEBUG_1_0_expected_prev = DEBUG_1_0_expected;
	DEBUG_0_7_expected_prev = DEBUG_0_7_expected;
	DEBUG_0_6_expected_prev = DEBUG_0_6_expected;
	DEBUG_0_5_expected_prev = DEBUG_0_5_expected;
	DEBUG_0_4_expected_prev = DEBUG_0_4_expected;
	DEBUG_0_3_expected_prev = DEBUG_0_3_expected;
	DEBUG_0_2_expected_prev = DEBUG_0_2_expected;
	DEBUG_0_1_expected_prev = DEBUG_0_1_expected;
	DEBUG_0_0_expected_prev = DEBUG_0_0_expected;
	N_expected_prev = N_expected;
	Ov_expected_prev = Ov_expected;
	Z_expected_prev = Z_expected;
end


// expected data_out[ 7 ]
initial
begin
	data_out_expected[7] = 1'bX;
end 
// expected data_out[ 6 ]
initial
begin
	data_out_expected[6] = 1'bX;
end 
// expected data_out[ 5 ]
initial
begin
	data_out_expected[5] = 1'bX;
end 
// expected data_out[ 4 ]
initial
begin
	data_out_expected[4] = 1'bX;
end 
// expected data_out[ 3 ]
initial
begin
	data_out_expected[3] = 1'bX;
end 
// expected data_out[ 2 ]
initial
begin
	data_out_expected[2] = 1'bX;
end 
// expected data_out[ 1 ]
initial
begin
	data_out_expected[1] = 1'bX;
end 
// expected data_out[ 0 ]
initial
begin
	data_out_expected[0] = 1'bX;
end 

// expected DEBUG[7]
initial
begin
	DEBUG_expected[7] = 1'bX;
end 

// expected DEBUG[6]
initial
begin
	DEBUG_expected[6] = 1'bX;
end 

// expected DEBUG[5]
initial
begin
	DEBUG_expected[5] = 1'bX;
end 

// expected DEBUG[4]
initial
begin
	DEBUG_expected[4] = 1'bX;
end 

// expected DEBUG[3]
initial
begin
	DEBUG_expected[3] = 1'bX;
end 

// expected DEBUG[2]
initial
begin
	DEBUG_expected[2] = 1'bX;
end 

// expected DEBUG[1]
initial
begin
	DEBUG_expected[1] = 1'bX;
end 

// expected DEBUG[0]
initial
begin
	DEBUG_expected[0] = 1'bX;
end 

// expected DEBUG[0][0]
initial
begin
	DEBUG_0_0_expected = 1'bX;
end 

// expected DEBUG[0][1]
initial
begin
	DEBUG_0_1_expected = 1'bX;
end 

// expected DEBUG[0][2]
initial
begin
	DEBUG_0_2_expected = 1'bX;
end 

// expected DEBUG[0][3]
initial
begin
	DEBUG_0_3_expected = 1'bX;
end 

// expected DEBUG[0][4]
initial
begin
	DEBUG_0_4_expected = 1'bX;
end 

// expected DEBUG[0][5]
initial
begin
	DEBUG_0_5_expected = 1'bX;
end 

// expected DEBUG[0][6]
initial
begin
	DEBUG_0_6_expected = 1'bX;
end 

// expected DEBUG[0][7]
initial
begin
	DEBUG_0_7_expected = 1'bX;
end 

// expected DEBUG[1][0]
initial
begin
	DEBUG_1_0_expected = 1'bX;
end 

// expected DEBUG[1][1]
initial
begin
	DEBUG_1_1_expected = 1'bX;
end 

// expected DEBUG[1][2]
initial
begin
	DEBUG_1_2_expected = 1'bX;
end 

// expected DEBUG[1][3]
initial
begin
	DEBUG_1_3_expected = 1'bX;
end 

// expected DEBUG[1][4]
initial
begin
	DEBUG_1_4_expected = 1'bX;
end 

// expected DEBUG[1][5]
initial
begin
	DEBUG_1_5_expected = 1'bX;
end 

// expected DEBUG[1][6]
initial
begin
	DEBUG_1_6_expected = 1'bX;
end 

// expected DEBUG[1][7]
initial
begin
	DEBUG_1_7_expected = 1'bX;
end 

// expected DEBUG[2][0]
initial
begin
	DEBUG_2_0_expected = 1'bX;
end 

// expected DEBUG[2][1]
initial
begin
	DEBUG_2_1_expected = 1'bX;
end 

// expected DEBUG[2][2]
initial
begin
	DEBUG_2_2_expected = 1'bX;
end 

// expected DEBUG[2][3]
initial
begin
	DEBUG_2_3_expected = 1'bX;
end 

// expected DEBUG[2][4]
initial
begin
	DEBUG_2_4_expected = 1'bX;
end 

// expected DEBUG[2][5]
initial
begin
	DEBUG_2_5_expected = 1'bX;
end 

// expected DEBUG[2][6]
initial
begin
	DEBUG_2_6_expected = 1'bX;
end 

// expected DEBUG[2][7]
initial
begin
	DEBUG_2_7_expected = 1'bX;
end 

// expected DEBUG[3][0]
initial
begin
	DEBUG_3_0_expected = 1'bX;
end 

// expected DEBUG[3][1]
initial
begin
	DEBUG_3_1_expected = 1'bX;
end 

// expected DEBUG[3][2]
initial
begin
	DEBUG_3_2_expected = 1'bX;
end 

// expected DEBUG[3][3]
initial
begin
	DEBUG_3_3_expected = 1'bX;
end 

// expected DEBUG[3][4]
initial
begin
	DEBUG_3_4_expected = 1'bX;
end 

// expected DEBUG[3][5]
initial
begin
	DEBUG_3_5_expected = 1'bX;
end 

// expected DEBUG[3][6]
initial
begin
	DEBUG_3_6_expected = 1'bX;
end 

// expected DEBUG[3][7]
initial
begin
	DEBUG_3_7_expected = 1'bX;
end 

// expected DEBUG[4][0]
initial
begin
	DEBUG_4_0_expected = 1'bX;
end 

// expected DEBUG[4][1]
initial
begin
	DEBUG_4_1_expected = 1'bX;
end 

// expected DEBUG[4][2]
initial
begin
	DEBUG_4_2_expected = 1'bX;
end 

// expected DEBUG[4][3]
initial
begin
	DEBUG_4_3_expected = 1'bX;
end 

// expected DEBUG[4][4]
initial
begin
	DEBUG_4_4_expected = 1'bX;
end 

// expected DEBUG[4][5]
initial
begin
	DEBUG_4_5_expected = 1'bX;
end 

// expected DEBUG[4][6]
initial
begin
	DEBUG_4_6_expected = 1'bX;
end 

// expected DEBUG[4][7]
initial
begin
	DEBUG_4_7_expected = 1'bX;
end 

// expected DEBUG[5][0]
initial
begin
	DEBUG_5_0_expected = 1'bX;
end 

// expected DEBUG[5][1]
initial
begin
	DEBUG_5_1_expected = 1'bX;
end 

// expected DEBUG[5][2]
initial
begin
	DEBUG_5_2_expected = 1'bX;
end 

// expected DEBUG[5][3]
initial
begin
	DEBUG_5_3_expected = 1'bX;
end 

// expected DEBUG[5][4]
initial
begin
	DEBUG_5_4_expected = 1'bX;
end 

// expected DEBUG[5][5]
initial
begin
	DEBUG_5_5_expected = 1'bX;
end 

// expected DEBUG[5][6]
initial
begin
	DEBUG_5_6_expected = 1'bX;
end 

// expected DEBUG[5][7]
initial
begin
	DEBUG_5_7_expected = 1'bX;
end 

// expected DEBUG[6][0]
initial
begin
	DEBUG_6_0_expected = 1'bX;
end 

// expected DEBUG[6][1]
initial
begin
	DEBUG_6_1_expected = 1'bX;
end 

// expected DEBUG[6][2]
initial
begin
	DEBUG_6_2_expected = 1'bX;
end 

// expected DEBUG[6][3]
initial
begin
	DEBUG_6_3_expected = 1'bX;
end 

// expected DEBUG[6][4]
initial
begin
	DEBUG_6_4_expected = 1'bX;
end 

// expected DEBUG[6][5]
initial
begin
	DEBUG_6_5_expected = 1'bX;
end 

// expected DEBUG[6][6]
initial
begin
	DEBUG_6_6_expected = 1'bX;
end 

// expected DEBUG[6][7]
initial
begin
	DEBUG_6_7_expected = 1'bX;
end 

// expected DEBUG[7][7]
initial
begin
	DEBUG_7_7_expected = 1'bX;
end 

// expected DEBUG[7][0]
initial
begin
	DEBUG_7_0_expected = 1'bX;
end 

// expected DEBUG[7][1]
initial
begin
	DEBUG_7_1_expected = 1'bX;
end 

// expected DEBUG[7][2]
initial
begin
	DEBUG_7_2_expected = 1'bX;
end 

// expected DEBUG[7][3]
initial
begin
	DEBUG_7_3_expected = 1'bX;
end 

// expected DEBUG[7][4]
initial
begin
	DEBUG_7_4_expected = 1'bX;
end 

// expected DEBUG[7][5]
initial
begin
	DEBUG_7_5_expected = 1'bX;
end 

// expected DEBUG[7][6]
initial
begin
	DEBUG_7_6_expected = 1'bX;
end 

// expected N
initial
begin
	N_expected = 1'bX;
end 

// expected Ov
initial
begin
	Ov_expected = 1'bX;
end 

// expected Cout
initial
begin
	Cout_expected = 1'bX;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
end 
// generate trigger
always @(Cout_expected or Cout or data_out_expected or data_out or DEBUG_7_7_expected or DEBUG_7_7 or DEBUG_7_6_expected or DEBUG_7_6 or DEBUG_7_5_expected or DEBUG_7_5 or DEBUG_7_4_expected or DEBUG_7_4 or DEBUG_7_3_expected or DEBUG_7_3 or DEBUG_7_2_expected or DEBUG_7_2 or DEBUG_7_1_expected or DEBUG_7_1 or DEBUG_7_0_expected or DEBUG_7_0 or DEBUG_6_7_expected or DEBUG_6_7 or DEBUG_6_6_expected or DEBUG_6_6 or DEBUG_6_5_expected or DEBUG_6_5 or DEBUG_6_4_expected or DEBUG_6_4 or DEBUG_6_3_expected or DEBUG_6_3 or DEBUG_6_2_expected or DEBUG_6_2 or DEBUG_6_1_expected or DEBUG_6_1 or DEBUG_6_0_expected or DEBUG_6_0 or DEBUG_5_7_expected or DEBUG_5_7 or DEBUG_5_6_expected or DEBUG_5_6 or DEBUG_5_5_expected or DEBUG_5_5 or DEBUG_5_4_expected or DEBUG_5_4 or DEBUG_5_3_expected or DEBUG_5_3 or DEBUG_5_2_expected or DEBUG_5_2 or DEBUG_5_1_expected or DEBUG_5_1 or DEBUG_5_0_expected or DEBUG_5_0 or DEBUG_4_7_expected or DEBUG_4_7 or DEBUG_4_6_expected or DEBUG_4_6 or DEBUG_4_5_expected or DEBUG_4_5 or DEBUG_4_4_expected or DEBUG_4_4 or DEBUG_4_3_expected or DEBUG_4_3 or DEBUG_4_2_expected or DEBUG_4_2 or DEBUG_4_1_expected or DEBUG_4_1 or DEBUG_4_0_expected or DEBUG_4_0 or DEBUG_3_7_expected or DEBUG_3_7 or DEBUG_3_6_expected or DEBUG_3_6 or DEBUG_3_5_expected or DEBUG_3_5 or DEBUG_3_4_expected or DEBUG_3_4 or DEBUG_3_3_expected or DEBUG_3_3 or DEBUG_3_2_expected or DEBUG_3_2 or DEBUG_3_1_expected or DEBUG_3_1 or DEBUG_3_0_expected or DEBUG_3_0 or DEBUG_2_7_expected or DEBUG_2_7 or DEBUG_2_6_expected or DEBUG_2_6 or DEBUG_2_5_expected or DEBUG_2_5 or DEBUG_2_4_expected or DEBUG_2_4 or DEBUG_2_3_expected or DEBUG_2_3 or DEBUG_2_2_expected or DEBUG_2_2 or DEBUG_2_1_expected or DEBUG_2_1 or DEBUG_2_0_expected or DEBUG_2_0 or DEBUG_1_7_expected or DEBUG_1_7 or DEBUG_1_6_expected or DEBUG_1_6 or DEBUG_1_5_expected or DEBUG_1_5 or DEBUG_1_4_expected or DEBUG_1_4 or DEBUG_1_3_expected or DEBUG_1_3 or DEBUG_1_2_expected or DEBUG_1_2 or DEBUG_1_1_expected or DEBUG_1_1 or DEBUG_1_0_expected or DEBUG_1_0 or DEBUG_0_7_expected or DEBUG_0_7 or DEBUG_0_6_expected or DEBUG_0_6 or DEBUG_0_5_expected or DEBUG_0_5 or DEBUG_0_4_expected or DEBUG_0_4 or DEBUG_0_3_expected or DEBUG_0_3 or DEBUG_0_2_expected or DEBUG_0_2 or DEBUG_0_1_expected or DEBUG_0_1 or DEBUG_0_0_expected or DEBUG_0_0 or N_expected or N or Ov_expected or Ov or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Cout = %b | expected data_out = %b | expected DEBUG_7_7 = %b | expected DEBUG_7_6 = %b | expected DEBUG_7_5 = %b | expected DEBUG_7_4 = %b | expected DEBUG_7_3 = %b | expected DEBUG_7_2 = %b | expected DEBUG_7_1 = %b | expected DEBUG_7_0 = %b | expected DEBUG_6_7 = %b | expected DEBUG_6_6 = %b | expected DEBUG_6_5 = %b | expected DEBUG_6_4 = %b | expected DEBUG_6_3 = %b | expected DEBUG_6_2 = %b | expected DEBUG_6_1 = %b | expected DEBUG_6_0 = %b | expected DEBUG_5_7 = %b | expected DEBUG_5_6 = %b | expected DEBUG_5_5 = %b | expected DEBUG_5_4 = %b | expected DEBUG_5_3 = %b | expected DEBUG_5_2 = %b | expected DEBUG_5_1 = %b | expected DEBUG_5_0 = %b | expected DEBUG_4_7 = %b | expected DEBUG_4_6 = %b | expected DEBUG_4_5 = %b | expected DEBUG_4_4 = %b | expected DEBUG_4_3 = %b | expected DEBUG_4_2 = %b | expected DEBUG_4_1 = %b | expected DEBUG_4_0 = %b | expected DEBUG_3_7 = %b | expected DEBUG_3_6 = %b | expected DEBUG_3_5 = %b | expected DEBUG_3_4 = %b | expected DEBUG_3_3 = %b | expected DEBUG_3_2 = %b | expected DEBUG_3_1 = %b | expected DEBUG_3_0 = %b | expected DEBUG_2_7 = %b | expected DEBUG_2_6 = %b | expected DEBUG_2_5 = %b | expected DEBUG_2_4 = %b | expected DEBUG_2_3 = %b | expected DEBUG_2_2 = %b | expected DEBUG_2_1 = %b | expected DEBUG_2_0 = %b | expected DEBUG_1_7 = %b | expected DEBUG_1_6 = %b | expected DEBUG_1_5 = %b | expected DEBUG_1_4 = %b | expected DEBUG_1_3 = %b | expected DEBUG_1_2 = %b | expected DEBUG_1_1 = %b | expected DEBUG_1_0 = %b | expected DEBUG_0_7 = %b | expected DEBUG_0_6 = %b | expected DEBUG_0_5 = %b | expected DEBUG_0_4 = %b | expected DEBUG_0_3 = %b | expected DEBUG_0_2 = %b | expected DEBUG_0_1 = %b | expected DEBUG_0_0 = %b | expected N = %b | expected Ov = %b | expected Z = %b | ",Cout_expected_prev,data_out_expected_prev,DEBUG_7_7_expected_prev,DEBUG_7_6_expected_prev,DEBUG_7_5_expected_prev,DEBUG_7_4_expected_prev,DEBUG_7_3_expected_prev,DEBUG_7_2_expected_prev,DEBUG_7_1_expected_prev,DEBUG_7_0_expected_prev,DEBUG_6_7_expected_prev,DEBUG_6_6_expected_prev,DEBUG_6_5_expected_prev,DEBUG_6_4_expected_prev,DEBUG_6_3_expected_prev,DEBUG_6_2_expected_prev,DEBUG_6_1_expected_prev,DEBUG_6_0_expected_prev,DEBUG_5_7_expected_prev,DEBUG_5_6_expected_prev,DEBUG_5_5_expected_prev,DEBUG_5_4_expected_prev,DEBUG_5_3_expected_prev,DEBUG_5_2_expected_prev,DEBUG_5_1_expected_prev,DEBUG_5_0_expected_prev,DEBUG_4_7_expected_prev,DEBUG_4_6_expected_prev,DEBUG_4_5_expected_prev,DEBUG_4_4_expected_prev,DEBUG_4_3_expected_prev,DEBUG_4_2_expected_prev,DEBUG_4_1_expected_prev,DEBUG_4_0_expected_prev,DEBUG_3_7_expected_prev,DEBUG_3_6_expected_prev,DEBUG_3_5_expected_prev,DEBUG_3_4_expected_prev,DEBUG_3_3_expected_prev,DEBUG_3_2_expected_prev,DEBUG_3_1_expected_prev,DEBUG_3_0_expected_prev,DEBUG_2_7_expected_prev,DEBUG_2_6_expected_prev,DEBUG_2_5_expected_prev,DEBUG_2_4_expected_prev,DEBUG_2_3_expected_prev,DEBUG_2_2_expected_prev,DEBUG_2_1_expected_prev,DEBUG_2_0_expected_prev,DEBUG_1_7_expected_prev,DEBUG_1_6_expected_prev,DEBUG_1_5_expected_prev,DEBUG_1_4_expected_prev,DEBUG_1_3_expected_prev,DEBUG_1_2_expected_prev,DEBUG_1_1_expected_prev,DEBUG_1_0_expected_prev,DEBUG_0_7_expected_prev,DEBUG_0_6_expected_prev,DEBUG_0_5_expected_prev,DEBUG_0_4_expected_prev,DEBUG_0_3_expected_prev,DEBUG_0_2_expected_prev,DEBUG_0_1_expected_prev,DEBUG_0_0_expected_prev,N_expected_prev,Ov_expected_prev,Z_expected_prev);
	$display("| real Cout = %b | real data_out = %b | real DEBUG_7_7 = %b | real DEBUG_7_6 = %b | real DEBUG_7_5 = %b | real DEBUG_7_4 = %b | real DEBUG_7_3 = %b | real DEBUG_7_2 = %b | real DEBUG_7_1 = %b | real DEBUG_7_0 = %b | real DEBUG_6_7 = %b | real DEBUG_6_6 = %b | real DEBUG_6_5 = %b | real DEBUG_6_4 = %b | real DEBUG_6_3 = %b | real DEBUG_6_2 = %b | real DEBUG_6_1 = %b | real DEBUG_6_0 = %b | real DEBUG_5_7 = %b | real DEBUG_5_6 = %b | real DEBUG_5_5 = %b | real DEBUG_5_4 = %b | real DEBUG_5_3 = %b | real DEBUG_5_2 = %b | real DEBUG_5_1 = %b | real DEBUG_5_0 = %b | real DEBUG_4_7 = %b | real DEBUG_4_6 = %b | real DEBUG_4_5 = %b | real DEBUG_4_4 = %b | real DEBUG_4_3 = %b | real DEBUG_4_2 = %b | real DEBUG_4_1 = %b | real DEBUG_4_0 = %b | real DEBUG_3_7 = %b | real DEBUG_3_6 = %b | real DEBUG_3_5 = %b | real DEBUG_3_4 = %b | real DEBUG_3_3 = %b | real DEBUG_3_2 = %b | real DEBUG_3_1 = %b | real DEBUG_3_0 = %b | real DEBUG_2_7 = %b | real DEBUG_2_6 = %b | real DEBUG_2_5 = %b | real DEBUG_2_4 = %b | real DEBUG_2_3 = %b | real DEBUG_2_2 = %b | real DEBUG_2_1 = %b | real DEBUG_2_0 = %b | real DEBUG_1_7 = %b | real DEBUG_1_6 = %b | real DEBUG_1_5 = %b | real DEBUG_1_4 = %b | real DEBUG_1_3 = %b | real DEBUG_1_2 = %b | real DEBUG_1_1 = %b | real DEBUG_1_0 = %b | real DEBUG_0_7 = %b | real DEBUG_0_6 = %b | real DEBUG_0_5 = %b | real DEBUG_0_4 = %b | real DEBUG_0_3 = %b | real DEBUG_0_2 = %b | real DEBUG_0_1 = %b | real DEBUG_0_0 = %b | real N = %b | real Ov = %b | real Z = %b | ",Cout_prev,data_out_prev,DEBUG_7_7_prev,DEBUG_7_6_prev,DEBUG_7_5_prev,DEBUG_7_4_prev,DEBUG_7_3_prev,DEBUG_7_2_prev,DEBUG_7_1_prev,DEBUG_7_0_prev,DEBUG_6_7_prev,DEBUG_6_6_prev,DEBUG_6_5_prev,DEBUG_6_4_prev,DEBUG_6_3_prev,DEBUG_6_2_prev,DEBUG_6_1_prev,DEBUG_6_0_prev,DEBUG_5_7_prev,DEBUG_5_6_prev,DEBUG_5_5_prev,DEBUG_5_4_prev,DEBUG_5_3_prev,DEBUG_5_2_prev,DEBUG_5_1_prev,DEBUG_5_0_prev,DEBUG_4_7_prev,DEBUG_4_6_prev,DEBUG_4_5_prev,DEBUG_4_4_prev,DEBUG_4_3_prev,DEBUG_4_2_prev,DEBUG_4_1_prev,DEBUG_4_0_prev,DEBUG_3_7_prev,DEBUG_3_6_prev,DEBUG_3_5_prev,DEBUG_3_4_prev,DEBUG_3_3_prev,DEBUG_3_2_prev,DEBUG_3_1_prev,DEBUG_3_0_prev,DEBUG_2_7_prev,DEBUG_2_6_prev,DEBUG_2_5_prev,DEBUG_2_4_prev,DEBUG_2_3_prev,DEBUG_2_2_prev,DEBUG_2_1_prev,DEBUG_2_0_prev,DEBUG_1_7_prev,DEBUG_1_6_prev,DEBUG_1_5_prev,DEBUG_1_4_prev,DEBUG_1_3_prev,DEBUG_1_2_prev,DEBUG_1_1_prev,DEBUG_1_0_prev,DEBUG_0_7_prev,DEBUG_0_6_prev,DEBUG_0_5_prev,DEBUG_0_4_prev,DEBUG_0_3_prev,DEBUG_0_2_prev,DEBUG_0_1_prev,DEBUG_0_0_prev,N_prev,Ov_prev,Z_prev);
`endif
	if (
		( Cout_expected_prev !== 1'bx ) && ( Cout_prev !== Cout_expected_prev )
		&& ((Cout_expected_prev !== last_Cout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cout_expected_prev);
		$display ("     Real value = %b", Cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cout_exp = Cout_expected_prev;
	end
	if (
		( data_out_expected_prev[0] !== 1'bx ) && ( data_out_prev[0] !== data_out_expected_prev[0] )
		&& ((data_out_expected_prev[0] !== last_data_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[0] = data_out_expected_prev[0];
	end
	if (
		( data_out_expected_prev[1] !== 1'bx ) && ( data_out_prev[1] !== data_out_expected_prev[1] )
		&& ((data_out_expected_prev[1] !== last_data_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[1] = data_out_expected_prev[1];
	end
	if (
		( data_out_expected_prev[2] !== 1'bx ) && ( data_out_prev[2] !== data_out_expected_prev[2] )
		&& ((data_out_expected_prev[2] !== last_data_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[2] = data_out_expected_prev[2];
	end
	if (
		( data_out_expected_prev[3] !== 1'bx ) && ( data_out_prev[3] !== data_out_expected_prev[3] )
		&& ((data_out_expected_prev[3] !== last_data_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[3] = data_out_expected_prev[3];
	end
	if (
		( data_out_expected_prev[4] !== 1'bx ) && ( data_out_prev[4] !== data_out_expected_prev[4] )
		&& ((data_out_expected_prev[4] !== last_data_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[4] = data_out_expected_prev[4];
	end
	if (
		( data_out_expected_prev[5] !== 1'bx ) && ( data_out_prev[5] !== data_out_expected_prev[5] )
		&& ((data_out_expected_prev[5] !== last_data_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[5] = data_out_expected_prev[5];
	end
	if (
		( data_out_expected_prev[6] !== 1'bx ) && ( data_out_prev[6] !== data_out_expected_prev[6] )
		&& ((data_out_expected_prev[6] !== last_data_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[6] = data_out_expected_prev[6];
	end
	if (
		( data_out_expected_prev[7] !== 1'bx ) && ( data_out_prev[7] !== data_out_expected_prev[7] )
		&& ((data_out_expected_prev[7] !== last_data_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[7] = data_out_expected_prev[7];
	end
	if (
		( DEBUG_7_7_expected_prev !== 1'bx ) && ( DEBUG_7_7_prev !== DEBUG_7_7_expected_prev )
		&& ((DEBUG_7_7_expected_prev !== last_DEBUG_7_7_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_7_7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_7_7_expected_prev);
		$display ("     Real value = %b", DEBUG_7_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DEBUG_7_7_exp = DEBUG_7_7_expected_prev;
	end
	if (
		( DEBUG_7_6_expected_prev !== 1'bx ) && ( DEBUG_7_6_prev !== DEBUG_7_6_expected_prev )
		&& ((DEBUG_7_6_expected_prev !== last_DEBUG_7_6_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_7_6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_7_6_expected_prev);
		$display ("     Real value = %b", DEBUG_7_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DEBUG_7_6_exp = DEBUG_7_6_expected_prev;
	end
	if (
		( DEBUG_7_5_expected_prev !== 1'bx ) && ( DEBUG_7_5_prev !== DEBUG_7_5_expected_prev )
		&& ((DEBUG_7_5_expected_prev !== last_DEBUG_7_5_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_7_5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_7_5_expected_prev);
		$display ("     Real value = %b", DEBUG_7_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DEBUG_7_5_exp = DEBUG_7_5_expected_prev;
	end
	if (
		( DEBUG_7_4_expected_prev !== 1'bx ) && ( DEBUG_7_4_prev !== DEBUG_7_4_expected_prev )
		&& ((DEBUG_7_4_expected_prev !== last_DEBUG_7_4_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_7_4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_7_4_expected_prev);
		$display ("     Real value = %b", DEBUG_7_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DEBUG_7_4_exp = DEBUG_7_4_expected_prev;
	end
	if (
		( DEBUG_7_3_expected_prev !== 1'bx ) && ( DEBUG_7_3_prev !== DEBUG_7_3_expected_prev )
		&& ((DEBUG_7_3_expected_prev !== last_DEBUG_7_3_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_7_3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_7_3_expected_prev);
		$display ("     Real value = %b", DEBUG_7_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DEBUG_7_3_exp = DEBUG_7_3_expected_prev;
	end
	if (
		( DEBUG_7_2_expected_prev !== 1'bx ) && ( DEBUG_7_2_prev !== DEBUG_7_2_expected_prev )
		&& ((DEBUG_7_2_expected_prev !== last_DEBUG_7_2_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_7_2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_7_2_expected_prev);
		$display ("     Real value = %b", DEBUG_7_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DEBUG_7_2_exp = DEBUG_7_2_expected_prev;
	end
	if (
		( DEBUG_7_1_expected_prev !== 1'bx ) && ( DEBUG_7_1_prev !== DEBUG_7_1_expected_prev )
		&& ((DEBUG_7_1_expected_prev !== last_DEBUG_7_1_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_7_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_7_1_expected_prev);
		$display ("     Real value = %b", DEBUG_7_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_DEBUG_7_1_exp = DEBUG_7_1_expected_prev;
	end
	if (
		( DEBUG_7_0_expected_prev !== 1'bx ) && ( DEBUG_7_0_prev !== DEBUG_7_0_expected_prev )
		&& ((DEBUG_7_0_expected_prev !== last_DEBUG_7_0_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_7_0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_7_0_expected_prev);
		$display ("     Real value = %b", DEBUG_7_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_DEBUG_7_0_exp = DEBUG_7_0_expected_prev;
	end
	if (
		( DEBUG_6_7_expected_prev !== 1'bx ) && ( DEBUG_6_7_prev !== DEBUG_6_7_expected_prev )
		&& ((DEBUG_6_7_expected_prev !== last_DEBUG_6_7_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_6_7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_6_7_expected_prev);
		$display ("     Real value = %b", DEBUG_6_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_DEBUG_6_7_exp = DEBUG_6_7_expected_prev;
	end
	if (
		( DEBUG_6_6_expected_prev !== 1'bx ) && ( DEBUG_6_6_prev !== DEBUG_6_6_expected_prev )
		&& ((DEBUG_6_6_expected_prev !== last_DEBUG_6_6_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_6_6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_6_6_expected_prev);
		$display ("     Real value = %b", DEBUG_6_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DEBUG_6_6_exp = DEBUG_6_6_expected_prev;
	end
	if (
		( DEBUG_6_5_expected_prev !== 1'bx ) && ( DEBUG_6_5_prev !== DEBUG_6_5_expected_prev )
		&& ((DEBUG_6_5_expected_prev !== last_DEBUG_6_5_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_6_5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_6_5_expected_prev);
		$display ("     Real value = %b", DEBUG_6_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_DEBUG_6_5_exp = DEBUG_6_5_expected_prev;
	end
	if (
		( DEBUG_6_4_expected_prev !== 1'bx ) && ( DEBUG_6_4_prev !== DEBUG_6_4_expected_prev )
		&& ((DEBUG_6_4_expected_prev !== last_DEBUG_6_4_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_6_4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_6_4_expected_prev);
		$display ("     Real value = %b", DEBUG_6_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_DEBUG_6_4_exp = DEBUG_6_4_expected_prev;
	end
	if (
		( DEBUG_6_3_expected_prev !== 1'bx ) && ( DEBUG_6_3_prev !== DEBUG_6_3_expected_prev )
		&& ((DEBUG_6_3_expected_prev !== last_DEBUG_6_3_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_6_3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_6_3_expected_prev);
		$display ("     Real value = %b", DEBUG_6_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_DEBUG_6_3_exp = DEBUG_6_3_expected_prev;
	end
	if (
		( DEBUG_6_2_expected_prev !== 1'bx ) && ( DEBUG_6_2_prev !== DEBUG_6_2_expected_prev )
		&& ((DEBUG_6_2_expected_prev !== last_DEBUG_6_2_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_6_2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_6_2_expected_prev);
		$display ("     Real value = %b", DEBUG_6_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DEBUG_6_2_exp = DEBUG_6_2_expected_prev;
	end
	if (
		( DEBUG_6_1_expected_prev !== 1'bx ) && ( DEBUG_6_1_prev !== DEBUG_6_1_expected_prev )
		&& ((DEBUG_6_1_expected_prev !== last_DEBUG_6_1_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_6_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_6_1_expected_prev);
		$display ("     Real value = %b", DEBUG_6_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DEBUG_6_1_exp = DEBUG_6_1_expected_prev;
	end
	if (
		( DEBUG_6_0_expected_prev !== 1'bx ) && ( DEBUG_6_0_prev !== DEBUG_6_0_expected_prev )
		&& ((DEBUG_6_0_expected_prev !== last_DEBUG_6_0_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_6_0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_6_0_expected_prev);
		$display ("     Real value = %b", DEBUG_6_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DEBUG_6_0_exp = DEBUG_6_0_expected_prev;
	end
	if (
		( DEBUG_5_7_expected_prev !== 1'bx ) && ( DEBUG_5_7_prev !== DEBUG_5_7_expected_prev )
		&& ((DEBUG_5_7_expected_prev !== last_DEBUG_5_7_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_5_7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_5_7_expected_prev);
		$display ("     Real value = %b", DEBUG_5_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_DEBUG_5_7_exp = DEBUG_5_7_expected_prev;
	end
	if (
		( DEBUG_5_6_expected_prev !== 1'bx ) && ( DEBUG_5_6_prev !== DEBUG_5_6_expected_prev )
		&& ((DEBUG_5_6_expected_prev !== last_DEBUG_5_6_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_5_6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_5_6_expected_prev);
		$display ("     Real value = %b", DEBUG_5_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_DEBUG_5_6_exp = DEBUG_5_6_expected_prev;
	end
	if (
		( DEBUG_5_5_expected_prev !== 1'bx ) && ( DEBUG_5_5_prev !== DEBUG_5_5_expected_prev )
		&& ((DEBUG_5_5_expected_prev !== last_DEBUG_5_5_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_5_5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_5_5_expected_prev);
		$display ("     Real value = %b", DEBUG_5_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_DEBUG_5_5_exp = DEBUG_5_5_expected_prev;
	end
	if (
		( DEBUG_5_4_expected_prev !== 1'bx ) && ( DEBUG_5_4_prev !== DEBUG_5_4_expected_prev )
		&& ((DEBUG_5_4_expected_prev !== last_DEBUG_5_4_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_5_4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_5_4_expected_prev);
		$display ("     Real value = %b", DEBUG_5_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_DEBUG_5_4_exp = DEBUG_5_4_expected_prev;
	end
	if (
		( DEBUG_5_3_expected_prev !== 1'bx ) && ( DEBUG_5_3_prev !== DEBUG_5_3_expected_prev )
		&& ((DEBUG_5_3_expected_prev !== last_DEBUG_5_3_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_5_3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_5_3_expected_prev);
		$display ("     Real value = %b", DEBUG_5_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_DEBUG_5_3_exp = DEBUG_5_3_expected_prev;
	end
	if (
		( DEBUG_5_2_expected_prev !== 1'bx ) && ( DEBUG_5_2_prev !== DEBUG_5_2_expected_prev )
		&& ((DEBUG_5_2_expected_prev !== last_DEBUG_5_2_exp) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_5_2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_5_2_expected_prev);
		$display ("     Real value = %b", DEBUG_5_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_DEBUG_5_2_exp = DEBUG_5_2_expected_prev;
	end
	if (
		( DEBUG_5_1_expected_prev !== 1'bx ) && ( DEBUG_5_1_prev !== DEBUG_5_1_expected_prev )
		&& ((DEBUG_5_1_expected_prev !== last_DEBUG_5_1_exp) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_5_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_5_1_expected_prev);
		$display ("     Real value = %b", DEBUG_5_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_DEBUG_5_1_exp = DEBUG_5_1_expected_prev;
	end
	if (
		( DEBUG_5_0_expected_prev !== 1'bx ) && ( DEBUG_5_0_prev !== DEBUG_5_0_expected_prev )
		&& ((DEBUG_5_0_expected_prev !== last_DEBUG_5_0_exp) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_5_0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_5_0_expected_prev);
		$display ("     Real value = %b", DEBUG_5_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_DEBUG_5_0_exp = DEBUG_5_0_expected_prev;
	end
	if (
		( DEBUG_4_7_expected_prev !== 1'bx ) && ( DEBUG_4_7_prev !== DEBUG_4_7_expected_prev )
		&& ((DEBUG_4_7_expected_prev !== last_DEBUG_4_7_exp) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_4_7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_4_7_expected_prev);
		$display ("     Real value = %b", DEBUG_4_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_DEBUG_4_7_exp = DEBUG_4_7_expected_prev;
	end
	if (
		( DEBUG_4_6_expected_prev !== 1'bx ) && ( DEBUG_4_6_prev !== DEBUG_4_6_expected_prev )
		&& ((DEBUG_4_6_expected_prev !== last_DEBUG_4_6_exp) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_4_6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_4_6_expected_prev);
		$display ("     Real value = %b", DEBUG_4_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_DEBUG_4_6_exp = DEBUG_4_6_expected_prev;
	end
	if (
		( DEBUG_4_5_expected_prev !== 1'bx ) && ( DEBUG_4_5_prev !== DEBUG_4_5_expected_prev )
		&& ((DEBUG_4_5_expected_prev !== last_DEBUG_4_5_exp) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_4_5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_4_5_expected_prev);
		$display ("     Real value = %b", DEBUG_4_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_DEBUG_4_5_exp = DEBUG_4_5_expected_prev;
	end
	if (
		( DEBUG_4_4_expected_prev !== 1'bx ) && ( DEBUG_4_4_prev !== DEBUG_4_4_expected_prev )
		&& ((DEBUG_4_4_expected_prev !== last_DEBUG_4_4_exp) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_4_4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_4_4_expected_prev);
		$display ("     Real value = %b", DEBUG_4_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_DEBUG_4_4_exp = DEBUG_4_4_expected_prev;
	end
	if (
		( DEBUG_4_3_expected_prev !== 1'bx ) && ( DEBUG_4_3_prev !== DEBUG_4_3_expected_prev )
		&& ((DEBUG_4_3_expected_prev !== last_DEBUG_4_3_exp) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_4_3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_4_3_expected_prev);
		$display ("     Real value = %b", DEBUG_4_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_DEBUG_4_3_exp = DEBUG_4_3_expected_prev;
	end
	if (
		( DEBUG_4_2_expected_prev !== 1'bx ) && ( DEBUG_4_2_prev !== DEBUG_4_2_expected_prev )
		&& ((DEBUG_4_2_expected_prev !== last_DEBUG_4_2_exp) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_4_2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_4_2_expected_prev);
		$display ("     Real value = %b", DEBUG_4_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_DEBUG_4_2_exp = DEBUG_4_2_expected_prev;
	end
	if (
		( DEBUG_4_1_expected_prev !== 1'bx ) && ( DEBUG_4_1_prev !== DEBUG_4_1_expected_prev )
		&& ((DEBUG_4_1_expected_prev !== last_DEBUG_4_1_exp) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_4_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_4_1_expected_prev);
		$display ("     Real value = %b", DEBUG_4_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_DEBUG_4_1_exp = DEBUG_4_1_expected_prev;
	end
	if (
		( DEBUG_4_0_expected_prev !== 1'bx ) && ( DEBUG_4_0_prev !== DEBUG_4_0_expected_prev )
		&& ((DEBUG_4_0_expected_prev !== last_DEBUG_4_0_exp) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_4_0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_4_0_expected_prev);
		$display ("     Real value = %b", DEBUG_4_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_DEBUG_4_0_exp = DEBUG_4_0_expected_prev;
	end
	if (
		( DEBUG_3_7_expected_prev !== 1'bx ) && ( DEBUG_3_7_prev !== DEBUG_3_7_expected_prev )
		&& ((DEBUG_3_7_expected_prev !== last_DEBUG_3_7_exp) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_3_7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_3_7_expected_prev);
		$display ("     Real value = %b", DEBUG_3_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_DEBUG_3_7_exp = DEBUG_3_7_expected_prev;
	end
	if (
		( DEBUG_3_6_expected_prev !== 1'bx ) && ( DEBUG_3_6_prev !== DEBUG_3_6_expected_prev )
		&& ((DEBUG_3_6_expected_prev !== last_DEBUG_3_6_exp) ||
			on_first_change[36])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_3_6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_3_6_expected_prev);
		$display ("     Real value = %b", DEBUG_3_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[36] = 1'b0;
		last_DEBUG_3_6_exp = DEBUG_3_6_expected_prev;
	end
	if (
		( DEBUG_3_5_expected_prev !== 1'bx ) && ( DEBUG_3_5_prev !== DEBUG_3_5_expected_prev )
		&& ((DEBUG_3_5_expected_prev !== last_DEBUG_3_5_exp) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_3_5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_3_5_expected_prev);
		$display ("     Real value = %b", DEBUG_3_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_DEBUG_3_5_exp = DEBUG_3_5_expected_prev;
	end
	if (
		( DEBUG_3_4_expected_prev !== 1'bx ) && ( DEBUG_3_4_prev !== DEBUG_3_4_expected_prev )
		&& ((DEBUG_3_4_expected_prev !== last_DEBUG_3_4_exp) ||
			on_first_change[38])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_3_4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_3_4_expected_prev);
		$display ("     Real value = %b", DEBUG_3_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[38] = 1'b0;
		last_DEBUG_3_4_exp = DEBUG_3_4_expected_prev;
	end
	if (
		( DEBUG_3_3_expected_prev !== 1'bx ) && ( DEBUG_3_3_prev !== DEBUG_3_3_expected_prev )
		&& ((DEBUG_3_3_expected_prev !== last_DEBUG_3_3_exp) ||
			on_first_change[39])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_3_3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_3_3_expected_prev);
		$display ("     Real value = %b", DEBUG_3_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[39] = 1'b0;
		last_DEBUG_3_3_exp = DEBUG_3_3_expected_prev;
	end
	if (
		( DEBUG_3_2_expected_prev !== 1'bx ) && ( DEBUG_3_2_prev !== DEBUG_3_2_expected_prev )
		&& ((DEBUG_3_2_expected_prev !== last_DEBUG_3_2_exp) ||
			on_first_change[40])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_3_2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_3_2_expected_prev);
		$display ("     Real value = %b", DEBUG_3_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[40] = 1'b0;
		last_DEBUG_3_2_exp = DEBUG_3_2_expected_prev;
	end
	if (
		( DEBUG_3_1_expected_prev !== 1'bx ) && ( DEBUG_3_1_prev !== DEBUG_3_1_expected_prev )
		&& ((DEBUG_3_1_expected_prev !== last_DEBUG_3_1_exp) ||
			on_first_change[41])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_3_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_3_1_expected_prev);
		$display ("     Real value = %b", DEBUG_3_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[41] = 1'b0;
		last_DEBUG_3_1_exp = DEBUG_3_1_expected_prev;
	end
	if (
		( DEBUG_3_0_expected_prev !== 1'bx ) && ( DEBUG_3_0_prev !== DEBUG_3_0_expected_prev )
		&& ((DEBUG_3_0_expected_prev !== last_DEBUG_3_0_exp) ||
			on_first_change[42])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_3_0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_3_0_expected_prev);
		$display ("     Real value = %b", DEBUG_3_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[42] = 1'b0;
		last_DEBUG_3_0_exp = DEBUG_3_0_expected_prev;
	end
	if (
		( DEBUG_2_7_expected_prev !== 1'bx ) && ( DEBUG_2_7_prev !== DEBUG_2_7_expected_prev )
		&& ((DEBUG_2_7_expected_prev !== last_DEBUG_2_7_exp) ||
			on_first_change[43])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_2_7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_2_7_expected_prev);
		$display ("     Real value = %b", DEBUG_2_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[43] = 1'b0;
		last_DEBUG_2_7_exp = DEBUG_2_7_expected_prev;
	end
	if (
		( DEBUG_2_6_expected_prev !== 1'bx ) && ( DEBUG_2_6_prev !== DEBUG_2_6_expected_prev )
		&& ((DEBUG_2_6_expected_prev !== last_DEBUG_2_6_exp) ||
			on_first_change[44])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_2_6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_2_6_expected_prev);
		$display ("     Real value = %b", DEBUG_2_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[44] = 1'b0;
		last_DEBUG_2_6_exp = DEBUG_2_6_expected_prev;
	end
	if (
		( DEBUG_2_5_expected_prev !== 1'bx ) && ( DEBUG_2_5_prev !== DEBUG_2_5_expected_prev )
		&& ((DEBUG_2_5_expected_prev !== last_DEBUG_2_5_exp) ||
			on_first_change[45])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_2_5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_2_5_expected_prev);
		$display ("     Real value = %b", DEBUG_2_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[45] = 1'b0;
		last_DEBUG_2_5_exp = DEBUG_2_5_expected_prev;
	end
	if (
		( DEBUG_2_4_expected_prev !== 1'bx ) && ( DEBUG_2_4_prev !== DEBUG_2_4_expected_prev )
		&& ((DEBUG_2_4_expected_prev !== last_DEBUG_2_4_exp) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_2_4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_2_4_expected_prev);
		$display ("     Real value = %b", DEBUG_2_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_DEBUG_2_4_exp = DEBUG_2_4_expected_prev;
	end
	if (
		( DEBUG_2_3_expected_prev !== 1'bx ) && ( DEBUG_2_3_prev !== DEBUG_2_3_expected_prev )
		&& ((DEBUG_2_3_expected_prev !== last_DEBUG_2_3_exp) ||
			on_first_change[47])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_2_3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_2_3_expected_prev);
		$display ("     Real value = %b", DEBUG_2_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[47] = 1'b0;
		last_DEBUG_2_3_exp = DEBUG_2_3_expected_prev;
	end
	if (
		( DEBUG_2_2_expected_prev !== 1'bx ) && ( DEBUG_2_2_prev !== DEBUG_2_2_expected_prev )
		&& ((DEBUG_2_2_expected_prev !== last_DEBUG_2_2_exp) ||
			on_first_change[48])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_2_2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_2_2_expected_prev);
		$display ("     Real value = %b", DEBUG_2_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[48] = 1'b0;
		last_DEBUG_2_2_exp = DEBUG_2_2_expected_prev;
	end
	if (
		( DEBUG_2_1_expected_prev !== 1'bx ) && ( DEBUG_2_1_prev !== DEBUG_2_1_expected_prev )
		&& ((DEBUG_2_1_expected_prev !== last_DEBUG_2_1_exp) ||
			on_first_change[49])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_2_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_2_1_expected_prev);
		$display ("     Real value = %b", DEBUG_2_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[49] = 1'b0;
		last_DEBUG_2_1_exp = DEBUG_2_1_expected_prev;
	end
	if (
		( DEBUG_2_0_expected_prev !== 1'bx ) && ( DEBUG_2_0_prev !== DEBUG_2_0_expected_prev )
		&& ((DEBUG_2_0_expected_prev !== last_DEBUG_2_0_exp) ||
			on_first_change[50])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_2_0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_2_0_expected_prev);
		$display ("     Real value = %b", DEBUG_2_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[50] = 1'b0;
		last_DEBUG_2_0_exp = DEBUG_2_0_expected_prev;
	end
	if (
		( DEBUG_1_7_expected_prev !== 1'bx ) && ( DEBUG_1_7_prev !== DEBUG_1_7_expected_prev )
		&& ((DEBUG_1_7_expected_prev !== last_DEBUG_1_7_exp) ||
			on_first_change[51])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_1_7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_1_7_expected_prev);
		$display ("     Real value = %b", DEBUG_1_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[51] = 1'b0;
		last_DEBUG_1_7_exp = DEBUG_1_7_expected_prev;
	end
	if (
		( DEBUG_1_6_expected_prev !== 1'bx ) && ( DEBUG_1_6_prev !== DEBUG_1_6_expected_prev )
		&& ((DEBUG_1_6_expected_prev !== last_DEBUG_1_6_exp) ||
			on_first_change[52])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_1_6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_1_6_expected_prev);
		$display ("     Real value = %b", DEBUG_1_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[52] = 1'b0;
		last_DEBUG_1_6_exp = DEBUG_1_6_expected_prev;
	end
	if (
		( DEBUG_1_5_expected_prev !== 1'bx ) && ( DEBUG_1_5_prev !== DEBUG_1_5_expected_prev )
		&& ((DEBUG_1_5_expected_prev !== last_DEBUG_1_5_exp) ||
			on_first_change[53])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_1_5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_1_5_expected_prev);
		$display ("     Real value = %b", DEBUG_1_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[53] = 1'b0;
		last_DEBUG_1_5_exp = DEBUG_1_5_expected_prev;
	end
	if (
		( DEBUG_1_4_expected_prev !== 1'bx ) && ( DEBUG_1_4_prev !== DEBUG_1_4_expected_prev )
		&& ((DEBUG_1_4_expected_prev !== last_DEBUG_1_4_exp) ||
			on_first_change[54])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_1_4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_1_4_expected_prev);
		$display ("     Real value = %b", DEBUG_1_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[54] = 1'b0;
		last_DEBUG_1_4_exp = DEBUG_1_4_expected_prev;
	end
	if (
		( DEBUG_1_3_expected_prev !== 1'bx ) && ( DEBUG_1_3_prev !== DEBUG_1_3_expected_prev )
		&& ((DEBUG_1_3_expected_prev !== last_DEBUG_1_3_exp) ||
			on_first_change[55])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_1_3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_1_3_expected_prev);
		$display ("     Real value = %b", DEBUG_1_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[55] = 1'b0;
		last_DEBUG_1_3_exp = DEBUG_1_3_expected_prev;
	end
	if (
		( DEBUG_1_2_expected_prev !== 1'bx ) && ( DEBUG_1_2_prev !== DEBUG_1_2_expected_prev )
		&& ((DEBUG_1_2_expected_prev !== last_DEBUG_1_2_exp) ||
			on_first_change[56])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_1_2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_1_2_expected_prev);
		$display ("     Real value = %b", DEBUG_1_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[56] = 1'b0;
		last_DEBUG_1_2_exp = DEBUG_1_2_expected_prev;
	end
	if (
		( DEBUG_1_1_expected_prev !== 1'bx ) && ( DEBUG_1_1_prev !== DEBUG_1_1_expected_prev )
		&& ((DEBUG_1_1_expected_prev !== last_DEBUG_1_1_exp) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_1_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_1_1_expected_prev);
		$display ("     Real value = %b", DEBUG_1_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_DEBUG_1_1_exp = DEBUG_1_1_expected_prev;
	end
	if (
		( DEBUG_1_0_expected_prev !== 1'bx ) && ( DEBUG_1_0_prev !== DEBUG_1_0_expected_prev )
		&& ((DEBUG_1_0_expected_prev !== last_DEBUG_1_0_exp) ||
			on_first_change[58])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_1_0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_1_0_expected_prev);
		$display ("     Real value = %b", DEBUG_1_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[58] = 1'b0;
		last_DEBUG_1_0_exp = DEBUG_1_0_expected_prev;
	end
	if (
		( DEBUG_0_7_expected_prev !== 1'bx ) && ( DEBUG_0_7_prev !== DEBUG_0_7_expected_prev )
		&& ((DEBUG_0_7_expected_prev !== last_DEBUG_0_7_exp) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_0_7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_0_7_expected_prev);
		$display ("     Real value = %b", DEBUG_0_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_DEBUG_0_7_exp = DEBUG_0_7_expected_prev;
	end
	if (
		( DEBUG_0_6_expected_prev !== 1'bx ) && ( DEBUG_0_6_prev !== DEBUG_0_6_expected_prev )
		&& ((DEBUG_0_6_expected_prev !== last_DEBUG_0_6_exp) ||
			on_first_change[60])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_0_6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_0_6_expected_prev);
		$display ("     Real value = %b", DEBUG_0_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[60] = 1'b0;
		last_DEBUG_0_6_exp = DEBUG_0_6_expected_prev;
	end
	if (
		( DEBUG_0_5_expected_prev !== 1'bx ) && ( DEBUG_0_5_prev !== DEBUG_0_5_expected_prev )
		&& ((DEBUG_0_5_expected_prev !== last_DEBUG_0_5_exp) ||
			on_first_change[61])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_0_5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_0_5_expected_prev);
		$display ("     Real value = %b", DEBUG_0_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[61] = 1'b0;
		last_DEBUG_0_5_exp = DEBUG_0_5_expected_prev;
	end
	if (
		( DEBUG_0_4_expected_prev !== 1'bx ) && ( DEBUG_0_4_prev !== DEBUG_0_4_expected_prev )
		&& ((DEBUG_0_4_expected_prev !== last_DEBUG_0_4_exp) ||
			on_first_change[62])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_0_4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_0_4_expected_prev);
		$display ("     Real value = %b", DEBUG_0_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[62] = 1'b0;
		last_DEBUG_0_4_exp = DEBUG_0_4_expected_prev;
	end
	if (
		( DEBUG_0_3_expected_prev !== 1'bx ) && ( DEBUG_0_3_prev !== DEBUG_0_3_expected_prev )
		&& ((DEBUG_0_3_expected_prev !== last_DEBUG_0_3_exp) ||
			on_first_change[63])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_0_3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_0_3_expected_prev);
		$display ("     Real value = %b", DEBUG_0_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[63] = 1'b0;
		last_DEBUG_0_3_exp = DEBUG_0_3_expected_prev;
	end
	if (
		( DEBUG_0_2_expected_prev !== 1'bx ) && ( DEBUG_0_2_prev !== DEBUG_0_2_expected_prev )
		&& ((DEBUG_0_2_expected_prev !== last_DEBUG_0_2_exp) ||
			on_first_change[64])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_0_2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_0_2_expected_prev);
		$display ("     Real value = %b", DEBUG_0_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[64] = 1'b0;
		last_DEBUG_0_2_exp = DEBUG_0_2_expected_prev;
	end
	if (
		( DEBUG_0_1_expected_prev !== 1'bx ) && ( DEBUG_0_1_prev !== DEBUG_0_1_expected_prev )
		&& ((DEBUG_0_1_expected_prev !== last_DEBUG_0_1_exp) ||
			on_first_change[65])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_0_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_0_1_expected_prev);
		$display ("     Real value = %b", DEBUG_0_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[65] = 1'b0;
		last_DEBUG_0_1_exp = DEBUG_0_1_expected_prev;
	end
	if (
		( DEBUG_0_0_expected_prev !== 1'bx ) && ( DEBUG_0_0_prev !== DEBUG_0_0_expected_prev )
		&& ((DEBUG_0_0_expected_prev !== last_DEBUG_0_0_exp) ||
			on_first_change[66])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG_0_0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_0_0_expected_prev);
		$display ("     Real value = %b", DEBUG_0_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[66] = 1'b0;
		last_DEBUG_0_0_exp = DEBUG_0_0_expected_prev;
	end
	if (
		( N_expected_prev !== 1'bx ) && ( N_prev !== N_expected_prev )
		&& ((N_expected_prev !== last_N_exp) ||
			on_first_change[67])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[67] = 1'b0;
		last_N_exp = N_expected_prev;
	end
	if (
		( Ov_expected_prev !== 1'bx ) && ( Ov_prev !== Ov_expected_prev )
		&& ((Ov_expected_prev !== last_Ov_exp) ||
			on_first_change[68])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ov :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ov_expected_prev);
		$display ("     Real value = %b", Ov_prev);
		nummismatches = nummismatches + 1;
		on_first_change[68] = 1'b0;
		last_Ov_exp = Ov_expected_prev;
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[69])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[69] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module datapath_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [28:0] c;
reg clock;
reg [7:0] data_in;
reg reset;
// wires                                               
wire Cout;
wire [7:0] data_out;
wire DEBUG_7_7;
wire DEBUG_7_6;
wire DEBUG_7_5;
wire DEBUG_7_4;
wire DEBUG_7_3;
wire DEBUG_7_2;
wire DEBUG_7_1;
wire DEBUG_7_0;
wire DEBUG_6_7;
wire DEBUG_6_6;
wire DEBUG_6_5;
wire DEBUG_6_4;
wire DEBUG_6_3;
wire DEBUG_6_2;
wire DEBUG_6_1;
wire DEBUG_6_0;
wire DEBUG_5_7;
wire DEBUG_5_6;
wire DEBUG_5_5;
wire DEBUG_5_4;
wire DEBUG_5_3;
wire DEBUG_5_2;
wire DEBUG_5_1;
wire DEBUG_5_0;
wire DEBUG_4_7;
wire DEBUG_4_6;
wire DEBUG_4_5;
wire DEBUG_4_4;
wire DEBUG_4_3;
wire DEBUG_4_2;
wire DEBUG_4_1;
wire DEBUG_4_0;
wire DEBUG_3_7;
wire DEBUG_3_6;
wire DEBUG_3_5;
wire DEBUG_3_4;
wire DEBUG_3_3;
wire DEBUG_3_2;
wire DEBUG_3_1;
wire DEBUG_3_0;
wire DEBUG_2_7;
wire DEBUG_2_6;
wire DEBUG_2_5;
wire DEBUG_2_4;
wire DEBUG_2_3;
wire DEBUG_2_2;
wire DEBUG_2_1;
wire DEBUG_2_0;
wire DEBUG_1_7;
wire DEBUG_1_6;
wire DEBUG_1_5;
wire DEBUG_1_4;
wire DEBUG_1_3;
wire DEBUG_1_2;
wire DEBUG_1_1;
wire DEBUG_1_0;
wire DEBUG_0_7;
wire DEBUG_0_6;
wire DEBUG_0_5;
wire DEBUG_0_4;
wire DEBUG_0_3;
wire DEBUG_0_2;
wire DEBUG_0_1;
wire DEBUG_0_0;
wire N;
wire Ov;
wire Z;

wire sampler;                             

// assign statements (if any)                          
datapath i1 (
// port map - connection between master ports and signals/registers   
	.c(c),
	.clock(clock),
	.Cout(Cout),
	.data_in(data_in),
	.data_out(data_out),
	.\DEBUG[7] (DEBUG[7]),
	.\DEBUG[6] (DEBUG[6]),
	.\DEBUG[5] (DEBUG[5]),
	.\DEBUG[4] (DEBUG[4]),
	.\DEBUG[3] (DEBUG[3]),
	.\DEBUG[2] (DEBUG[2]),
	.\DEBUG[1] (DEBUG[1]),
	.\DEBUG[0] (DEBUG[0]),
	.DEBUG_0_0(DEBUG_0_0),
	.DEBUG_0_1(DEBUG_0_1),
	.DEBUG_0_2(DEBUG_0_2),
	.DEBUG_0_3(DEBUG_0_3),
	.DEBUG_0_4(DEBUG_0_4),
	.DEBUG_0_5(DEBUG_0_5),
	.DEBUG_0_6(DEBUG_0_6),
	.DEBUG_0_7(DEBUG_0_7),
	.DEBUG_1_0(DEBUG_1_0),
	.DEBUG_1_1(DEBUG_1_1),
	.DEBUG_1_2(DEBUG_1_2),
	.DEBUG_1_3(DEBUG_1_3),
	.DEBUG_1_4(DEBUG_1_4),
	.DEBUG_1_5(DEBUG_1_5),
	.DEBUG_1_6(DEBUG_1_6),
	.DEBUG_1_7(DEBUG_1_7),
	.DEBUG_2_0(DEBUG_2_0),
	.DEBUG_2_1(DEBUG_2_1),
	.DEBUG_2_2(DEBUG_2_2),
	.DEBUG_2_3(DEBUG_2_3),
	.DEBUG_2_4(DEBUG_2_4),
	.DEBUG_2_5(DEBUG_2_5),
	.DEBUG_2_6(DEBUG_2_6),
	.DEBUG_2_7(DEBUG_2_7),
	.DEBUG_3_0(DEBUG_3_0),
	.DEBUG_3_1(DEBUG_3_1),
	.DEBUG_3_2(DEBUG_3_2),
	.DEBUG_3_3(DEBUG_3_3),
	.DEBUG_3_4(DEBUG_3_4),
	.DEBUG_3_5(DEBUG_3_5),
	.DEBUG_3_6(DEBUG_3_6),
	.DEBUG_3_7(DEBUG_3_7),
	.DEBUG_4_0(DEBUG_4_0),
	.DEBUG_4_1(DEBUG_4_1),
	.DEBUG_4_2(DEBUG_4_2),
	.DEBUG_4_3(DEBUG_4_3),
	.DEBUG_4_4(DEBUG_4_4),
	.DEBUG_4_5(DEBUG_4_5),
	.DEBUG_4_6(DEBUG_4_6),
	.DEBUG_4_7(DEBUG_4_7),
	.DEBUG_5_0(DEBUG_5_0),
	.DEBUG_5_1(DEBUG_5_1),
	.DEBUG_5_2(DEBUG_5_2),
	.DEBUG_5_3(DEBUG_5_3),
	.DEBUG_5_4(DEBUG_5_4),
	.DEBUG_5_5(DEBUG_5_5),
	.DEBUG_5_6(DEBUG_5_6),
	.DEBUG_5_7(DEBUG_5_7),
	.DEBUG_6_0(DEBUG_6_0),
	.DEBUG_6_1(DEBUG_6_1),
	.DEBUG_6_2(DEBUG_6_2),
	.DEBUG_6_3(DEBUG_6_3),
	.DEBUG_6_4(DEBUG_6_4),
	.DEBUG_6_5(DEBUG_6_5),
	.DEBUG_6_6(DEBUG_6_6),
	.DEBUG_6_7(DEBUG_6_7),
	.DEBUG_7_7(DEBUG_7_7),
	.DEBUG_7_0(DEBUG_7_0),
	.DEBUG_7_1(DEBUG_7_1),
	.DEBUG_7_2(DEBUG_7_2),
	.DEBUG_7_3(DEBUG_7_3),
	.DEBUG_7_4(DEBUG_7_4),
	.DEBUG_7_5(DEBUG_7_5),
	.DEBUG_7_6(DEBUG_7_6),
	.N(N),
	.Ov(Ov),
	.reset(reset),
	.Z(Z)
);

// clock
initial
begin
	repeat(13)
	begin
		clock = 1'b0;
		clock = #37500 1'b1;
		# 37500;
	end
	clock = 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #30000 1'b0;
	reset = #250000 1'b1;
	reset = #50000 1'b0;
end 
// c[ 28 ]
initial
begin
	c[28] = 1'b0;
end 
// c[ 27 ]
initial
begin
	c[27] = 1'b0;
end 
// c[ 26 ]
initial
begin
	c[26] = 1'b0;
end 
// c[ 25 ]
initial
begin
	c[25] = 1'b0;
end 
// c[ 24 ]
initial
begin
	c[24] = 1'b0;
end 
// c[ 23 ]
initial
begin
	c[23] = 1'b0;
end 
// c[ 22 ]
initial
begin
	c[22] = 1'b0;
end 
// c[ 21 ]
initial
begin
	c[21] = 1'b0;
end 
// c[ 20 ]
initial
begin
	c[20] = 1'b0;
end 
// c[ 19 ]
initial
begin
	c[19] = 1'b0;
end 
// c[ 18 ]
initial
begin
	c[18] = 1'b0;
end 
// c[ 17 ]
initial
begin
	c[17] = 1'b0;
end 
// c[ 16 ]
initial
begin
	c[16] = 1'b0;
end 
// c[ 15 ]
initial
begin
	c[15] = 1'b0;
end 
// c[ 14 ]
initial
begin
	c[14] = 1'b0;
	c[14] = #20000 1'b1;
	c[14] = #30000 1'b0;
end 
// c[ 13 ]
initial
begin
	c[13] = 1'b0;
end 
// c[ 12 ]
initial
begin
	c[12] = 1'b0;
end 
// c[ 11 ]
initial
begin
	c[11] = 1'b0;
end 
// c[ 10 ]
initial
begin
	c[10] = 1'b0;
	c[10] = #140000 1'b1;
	c[10] = #80000 1'b0;
end 
// c[ 9 ]
initial
begin
	c[9] = 1'b0;
	c[9] = #140000 1'b1;
	c[9] = #80000 1'b0;
end 
// c[ 8 ]
initial
begin
	c[8] = 1'b0;
	c[8] = #20000 1'b1;
	c[8] = #30000 1'b0;
end 
// c[ 7 ]
initial
begin
	c[7] = 1'b0;
end 
// c[ 6 ]
initial
begin
	c[6] = 1'b0;
	c[6] = #20000 1'b1;
	c[6] = #30000 1'b0;
end 
// c[ 5 ]
initial
begin
	c[5] = 1'b0;
end 
// c[ 4 ]
initial
begin
	c[4] = 1'b0;
end 
// c[ 3 ]
initial
begin
	c[3] = 1'b0;
end 
// c[ 2 ]
initial
begin
	c[2] = 1'b0;
	c[2] = #140000 1'b1;
	c[2] = #80000 1'b0;
end 
// c[ 1 ]
initial
begin
	c[1] = 1'b0;
	c[1] = #140000 1'b1;
	c[1] = #80000 1'b0;
end 
// c[ 0 ]
initial
begin
	c[0] = 1'b0;
	c[0] = #20000 1'b1;
	c[0] = #30000 1'b0;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b0;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b0;
	data_in[6] = #130000 1'b1;
	data_in[6] = #160000 1'b0;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b0;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b0;
	data_in[4] = #130000 1'b1;
	data_in[4] = #160000 1'b0;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b0;
	data_in[3] = #20000 1'b1;
	data_in[3] = #80000 1'b0;
	data_in[3] = #30000 1'b1;
	data_in[3] = #160000 1'b0;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b0;
	data_in[2] = #20000 1'b1;
	data_in[2] = #80000 1'b0;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b0;
	data_in[1] = #20000 1'b1;
	data_in[1] = #80000 1'b0;
	data_in[1] = #30000 1'b1;
	data_in[1] = #160000 1'b0;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b0;
	data_in[0] = #20000 1'b1;
	data_in[0] = #80000 1'b0;
end 

datapath_vlg_sample_tst tb_sample (
	.c(c),
	.clock(clock),
	.data_in(data_in),
	.reset(reset),
	.sampler_tx(sampler)
);

datapath_vlg_check_tst tb_out(
	.Cout(Cout),
	.data_out(data_out),
	.DEBUG_7_7(DEBUG_7_7),
	.DEBUG_7_6(DEBUG_7_6),
	.DEBUG_7_5(DEBUG_7_5),
	.DEBUG_7_4(DEBUG_7_4),
	.DEBUG_7_3(DEBUG_7_3),
	.DEBUG_7_2(DEBUG_7_2),
	.DEBUG_7_1(DEBUG_7_1),
	.DEBUG_7_0(DEBUG_7_0),
	.DEBUG_6_7(DEBUG_6_7),
	.DEBUG_6_6(DEBUG_6_6),
	.DEBUG_6_5(DEBUG_6_5),
	.DEBUG_6_4(DEBUG_6_4),
	.DEBUG_6_3(DEBUG_6_3),
	.DEBUG_6_2(DEBUG_6_2),
	.DEBUG_6_1(DEBUG_6_1),
	.DEBUG_6_0(DEBUG_6_0),
	.DEBUG_5_7(DEBUG_5_7),
	.DEBUG_5_6(DEBUG_5_6),
	.DEBUG_5_5(DEBUG_5_5),
	.DEBUG_5_4(DEBUG_5_4),
	.DEBUG_5_3(DEBUG_5_3),
	.DEBUG_5_2(DEBUG_5_2),
	.DEBUG_5_1(DEBUG_5_1),
	.DEBUG_5_0(DEBUG_5_0),
	.DEBUG_4_7(DEBUG_4_7),
	.DEBUG_4_6(DEBUG_4_6),
	.DEBUG_4_5(DEBUG_4_5),
	.DEBUG_4_4(DEBUG_4_4),
	.DEBUG_4_3(DEBUG_4_3),
	.DEBUG_4_2(DEBUG_4_2),
	.DEBUG_4_1(DEBUG_4_1),
	.DEBUG_4_0(DEBUG_4_0),
	.DEBUG_3_7(DEBUG_3_7),
	.DEBUG_3_6(DEBUG_3_6),
	.DEBUG_3_5(DEBUG_3_5),
	.DEBUG_3_4(DEBUG_3_4),
	.DEBUG_3_3(DEBUG_3_3),
	.DEBUG_3_2(DEBUG_3_2),
	.DEBUG_3_1(DEBUG_3_1),
	.DEBUG_3_0(DEBUG_3_0),
	.DEBUG_2_7(DEBUG_2_7),
	.DEBUG_2_6(DEBUG_2_6),
	.DEBUG_2_5(DEBUG_2_5),
	.DEBUG_2_4(DEBUG_2_4),
	.DEBUG_2_3(DEBUG_2_3),
	.DEBUG_2_2(DEBUG_2_2),
	.DEBUG_2_1(DEBUG_2_1),
	.DEBUG_2_0(DEBUG_2_0),
	.DEBUG_1_7(DEBUG_1_7),
	.DEBUG_1_6(DEBUG_1_6),
	.DEBUG_1_5(DEBUG_1_5),
	.DEBUG_1_4(DEBUG_1_4),
	.DEBUG_1_3(DEBUG_1_3),
	.DEBUG_1_2(DEBUG_1_2),
	.DEBUG_1_1(DEBUG_1_1),
	.DEBUG_1_0(DEBUG_1_0),
	.DEBUG_0_7(DEBUG_0_7),
	.DEBUG_0_6(DEBUG_0_6),
	.DEBUG_0_5(DEBUG_0_5),
	.DEBUG_0_4(DEBUG_0_4),
	.DEBUG_0_3(DEBUG_0_3),
	.DEBUG_0_2(DEBUG_0_2),
	.DEBUG_0_1(DEBUG_0_1),
	.DEBUG_0_0(DEBUG_0_0),
	.N(N),
	.Ov(Ov),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

